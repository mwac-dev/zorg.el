#+TITLE: Zorg.el – Zen mode with Org-focused project notes
#+AUTHOR: MWAC-dev
#+OPTIONS: toc:nil num:nil
#+PROPERTY: header-args:emacs-lisp :mkdirp yes

* Introduction
Zorg is a *Zen mode + project notes system* for Emacs, built around Org mode.

It creates side panels for project notes, leaving your main buffer centered and uncluttered.
Notes can be scoped to a single file, a directory, the whole project, or live globally.  

Think of it as a lightweight *scratchpad system for projects*:
- **Paired notes** stick to specific files (with rename/move support via alias association).
- **Directory notes** cover folders.
- **Loose notes** float inside the project.
- **Global notes** live outside projects.

Zorg also includes helpers to link back to code (deep links to file + line in the main buffer) or to other notes, plus seamless integration with AI tools including gptel and configurable AI CLI agents.

This is still *experimental* and evolving — feedback and contributions are welcome!

/edit Mon Sep 29 2025 - I have now added configurable AI agent CLI integration! You can use any AI CLI tool (copilot, aider, cursor, etc.) with automatic process management and restart capabilities./

* Installation
Clone this repo somewhere on your load path (e.g. =~/.config/doom/lisp/=):

#+begin_src emacs-lisp
(add-to-list 'load-path "~/.config/doom/lisp/zorg")
(require 'zorg)
#+end_src

Now you can toggle Zorg with ~M-x zorg-mode~.

* Features
- **Zen layout**: Center buffer flanked by two side panels.
- **Paired notes**: Notes bound to specific files. Supports multiple notes per file.  
  - Uses alias files so associations survive renames and moves.
- **Directory notes**: Notes scoped to a folder.
- **Loose notes**: Project-level scratchpad notes.
- **Global notes**: Scratchpads outside projects.
- **Link helpers**: Insert links back into code or between notes.
- **Finder commands**: Quickly browse all note types.
- **Layout control**: Toggle or resize side panels, with automatic fraction persistence.
- **AI Integration**: Seamless AI tool integration (gptel, customizable AI CLI agents) in configurable side panels with automatic process management.

* Configuration
** Global notes directory
By default, project-local notes live under =.zorg-notes/= inside each project.  
Global notes default to =~/projects/org/zorg/=, but you can change this:

#+begin_src emacs-lisp
(setq zorg-global-dir "~/Documents/zorg-notes/")
#+end_src

** Side panel widths
You can customize and persist panel widths using fractions (0.0 to 1.0):

#+begin_src emacs-lisp
(setq zorg-left-width-fraction  0.25   ; 25% of frame width
      zorg-right-width-fraction 0.25)  ; 25% of frame width
#+end_src

Widths auto-save when exiting Zorg mode, but you can force a save with:

#+begin_src emacs-lisp
M-x zorg-save-fractions
#+end_src

** AI Tools Integration
Zorg integrates with AI tools like gptel and any AI CLI agent. You can configure which side panel to use and customize the AI CLI command:

#+begin_src emacs-lisp
(setq zorg-ai-side 'right)  ; or 'left

;; Set your preferred AI CLI command (default: "copilot")
(setq zorg-ai-cli-command "copilot")  ; or "aider", "cursor", etc.

;; Control automatic restart behavior (default: t)
(setq zorg-ai-cli-restart-if-not-running t)  ; restart if process exits
#+end_src

You can also set the AI CLI command interactively:
#+begin_src emacs-lisp
M-x zorg-set-ai-cli-command
#+end_src

AI tools will seamlessly open in the configured side panel and restore the previous state when toggled off. If the AI CLI process exits, Zorg can automatically restart it when you next toggle the agent (controlled by ~zorg-ai-cli-restart-if-not-running~).

** AI Agent Examples
Here are some popular AI CLI tools you can use:

#+begin_src emacs-lisp
;; GitHub Copilot CLI (default)
(setq zorg-ai-cli-command "copilot")

;; Aider - AI pair programming tool
(setq zorg-ai-cli-command "aider")

;; Cursor CLI
(setq zorg-ai-cli-command "cursor")

;; Custom command with arguments
(setq zorg-ai-cli-command "my-ai-tool --interactive")
#+end_src

*Note*: ~zorg-ai-copilot~ is still available as a compatibility alias for ~zorg-ai-agent~.

** Configuration Variables
All Zorg settings can be customized via the customization system:

#+begin_src emacs-lisp
M-x customize-group RET zorg RET
#+end_src

Key variables include:
- ~zorg-notes-dir~ :: Directory for project notes (default: ".zorg-notes")
- ~zorg-global-dir~ :: Directory for global notes (default: "~/projects/org/zorg/")
- ~zorg-left-width-fraction~ :: Left panel width as fraction (default: 0.25)
- ~zorg-right-width-fraction~ :: Right panel width as fraction (default: 0.25)
- ~zorg-ai-side~ :: Which side for AI tools ('left or 'right, default: 'right)
- ~zorg-ai-cli-command~ :: AI CLI command to run (default: "copilot")
- ~zorg-ai-cli-restart-if-not-running~ :: Auto-restart CLI if process exits (default: t)

* Commands
Here’s the full command set:

- ~M-x zorg-mode~ :: Toggle Zen layout with side panels.
- ~M-x zorg-note-new~ :: Create a new loose note.
- ~M-x zorg-pair-note~ :: Open or create note(s) for the current file.
- ~M-x zorg-create-new-pair-note~ :: Create an additional paired note.
- ~M-x zorg-dir-note~ :: Open or create a note for the current directory.
- ~M-x zorg-create-new-dir-note~ :: Always create a new directory note.
- ~M-x zorg-find-pair-notes~ :: Pick from paired notes for the current file.
- ~M-x zorg-find-directory-notes~ :: Pick from notes scoped to the current directory.
- ~M-x zorg-find-directory-notes-recursive~ :: Same as above, but recursive.
- ~M-x zorg-find-loose-notes~ :: Pick from loose project notes.
- ~M-x zorg-find-global-notes~ :: Pick from global notes.
- ~M-x zorg-create-global-note~ :: Create a new global note.
- ~M-x zorg-ai-gptel~ :: Toggle gptel in the configured AI side panel.
- ~M-x zorg-ai-agent~ :: Toggle AI agent CLI in the configured AI side panel.
- ~M-x zorg-set-ai-cli-command~ :: Set the AI CLI command interactively.
- ~M-x zorg-reset-layout~ :: Reset panel widths to default fractions (25%).
- ~M-x zorg-save-fractions~ :: Save current panel fractions to custom.el.
- ~M-x zorg-set-pair-to-existing-note~ :: Associate the current file with an existing paired note (creates an alias so it survives renames/moves).

* Linking helpers
Zorg provides two main ways to cross-reference:

- ~M-x zorg-copy-link-to-here~ ::
  - From the main buffer → copies a deep link (file + line) to the kill ring.  
  - From a side buffer → inserts the link into the note *and* copies it.


  These always reopen the file in the *main buffer* and scroll the target line to the top.

- ~M-x zorg-insert-note-link~ ::
  Lets you pick another Zorg note and insert a link to it.  
  - Skips self-links.  
  - Uses the human-readable slug for the label.  
  - Always reopens in the *same side window*.


* Example config
Here’s a Doom-style setup with keybindings:

#+begin_src emacs-lisp
;; Ensure alias/association mode so paired notes survive renames/moves
;; (this is the default now, but being explicit is safer)
(setq zorg-pair-method 'hash) ;; 'hash is default, but notes can be re-associated via `zorg-set-pair-to-existing-note`

(map! :leader
      ;; Toggle
      :desc "Toggle Zorg mode" "z z" #'zorg-mode

      ;; Create new notes
      (:prefix ("z n" . "Zorg notes - new")
       :desc "New loose note"     "l" #'zorg-note-new
       :desc "New pair note"      "p" #'zorg-create-new-pair-note
       :desc "New directory note" "d" #'zorg-create-new-dir-note
       :desc "New global note"    "g" #'zorg-create-global-note)

      ;; Open/create contextual notes
      (:prefix ("z o" . "Zorg notes - open/create")
       :desc "Paired note (for file)"      "p" #'zorg-pair-note
       :desc "Directory note (for folder)" "d" #'zorg-dir-note)

      ;; Finders
      (:prefix ("f z" . "Zorg notes - find")
       :desc "Find loose notes"           "l" #'zorg-find-loose-notes
       :desc "Find pair notes"            "p" #'zorg-find-pair-notes
       :desc "Find directory notes"       "d" #'zorg-find-directory-notes
       :desc "Find recursive dir notes"   "r" #'zorg-find-directory-notes-recursive
       :desc "Find global notes"          "g" #'zorg-find-global-notes)

      ;; AI Tools
      (:prefix ("z a" . "Zorg AI tools")
       :desc "Toggle GPTel"               "g" #'zorg-ai-gptel
       :desc "Toggle AI Agent CLI"        "a" #'zorg-ai-agent
       :desc "Set AI CLI command"         "s" #'zorg-set-ai-cli-command))
#+end_src

⚠️ *Note*: The above uses Doom’s `map!`.  
For vanilla Emacs, replace these with `global-set-key` or `define-key`.  

As with any software: bugs happen, so please use version control and open issues if something breaks.
